#!/bin/bash
set -eo pipefail

proc_status() {
	pgrep -x "$@" > /dev/null 2>&1
	return $?

}

usage() {
  error "Usage: ${0##*/} [-c 'process1;process2'] [-f 'process1 --with args;/usr/local/bin/process2 --with-full-path']"

}

error() {
  printf "${@}\n" >&2
  exit 3

}

join_by() {
  local d=$1
  shift
  echo -n "$1"
  shift
  printf "%s" "${@/#/$d}"

}

while getopts ":hc:f:" opt; do
	case $opt in
	  c  ) IFS=';' read -r -a SHORTCOMMAND <<< "$OPTARG" ;;
	  f  ) IFS=';' read -r -a LONGCOMMAND <<< "$OPTARG" ;;
	  :  ) error "Option -$OPTARG requires an argument." ;;
	  \? ) error "Invalid option: -$OPTARG" ;;
	  h  ) usage ;;
	  *  ) usage ;;
	esac
done


ifs=';' PROCLIST=( "${SHORTCOMMAND[@]}" "${LONGCOMMAND[@]}" )
[[ -z "${PROCLIST[@]}" ]] && usage

for PROC in "${SHORTCOMMAND[@]}"; do
	proc_status "$PROC" || MISSING+=( "$PROC" )

done

for PROC in "${LONGCOMMAND[@]}"; do
	proc_status -f "$PROC" || MISSING+=( "$PROC" )

done

if [[ ${#MISSING[@]} = 1 ]]; then
	echo "WARNING: 1 missing process: ${MISSING[@]}"
	exit 1

elif [[ -n ${MISSING[@]} ]]; then
	echo "CRITICAL: ${#MISSING[@]} missing processes: $( join_by ', ' "${MISSING[@]}" )"
	exit 2

else
	[[ ${#PROCLIST[@]} = 1 ]] && noun=process || noun=processes
	echo "OK: ${#PROCLIST[@]} of ${#PROCLIST[@]} $noun found: $( join_by ', ' "${PROCLIST[@]}" )"
	exit 0

fi

